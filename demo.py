# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import os
import threading
from client import run, StopRun
from PyQt5.Qt import QThread, QMutex, pyqtSignal, QWidget, QApplication, QMainWindow, QPushButton


class Worker(QThread):
    def __init__(self, textEdit_value):
        super(Worker, self).__init__()
        self.textEdit_value = textEdit_value

    def run(self):
        run(self.textEdit_value, ui)


class Ui_MainWindow(QMainWindow):
    def __init__(self, MainWindow):
        super().__init__()
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(945, 702)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.train = QtWidgets.QPushButton(self.centralwidget)
        self.train.setGeometry(QtCore.QRect(180, 550, 91, 41))
        self.train.setObjectName("train")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(150, 110, 111, 101))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.file = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.file.setObjectName("file")
        self.horizontalLayout_2.addWidget(self.file)
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(440, 80, 441, 421))
        self.textBrowser.setObjectName("textBrowser")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(60, 180, 311, 121))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.lineEdit = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout.addWidget(self.lineEdit)

        self.stop = QtWidgets.QPushButton(self.centralwidget)
        self.stop.setGeometry(QtCore.QRect(610, 550, 91, 41))
        self.stop.setObjectName("stop")
        # self.gpid = QtWidgets.QTextBrowser(self.centralwidget)
        # self.gpid.setGeometry(QtCore.QRect(440, 40, 441, 41))
        # self.gpid.setObjectName("gpid")
        # self.kill_pid = QtWidgets.QLineEdit(self.centralwidget)
        # self.kill_pid.setGeometry(QtCore.QRect(500, 560, 171, 21))
        # self.kill_pid.setObjectName("kill_pid")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 945, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.log_buffer = []
        self.update_timer = QtCore.QTimer(self)
        self.update_timer.timeout.connect(self.update_display)
        self.update_timer.start(10)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.file.clicked.connect(self.msg)
        self.train.clicked.connect(self.get_lineEdit)
        self.stop.clicked.connect(self.quit_app)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.train.setText(_translate("MainWindow", "Prediect"))
        self.file.setText(_translate("MainWindow", "选择Video"))
        self.stop.setText(_translate("MainWindow", "STOP"))

    def msg(self, Filepath):
        m = QtWidgets.QFileDialog.getOpenFileNames(None, '选择文件', "D:/data/Automatic_wiring/cls/doubleCam/20241105", "All Files(*);;Text Files(*.txt)")
        # m = QtWidgets.QFileDialog.getExistingDirectory(None, "选择目录", "")
        self.textBrowser.clear()
        self.log_buffer.clear()
        threading.Thread(target=self.poplog_buffer)
        try:
            self.lineEdit.setText(m[0][0])
            self.printf("导入：{}".format(m[0][0]))
        except:
            self.printf('Need Video Path')

    def get_lineEdit(self):
        # current_file_path = os.path.dirname(os.path.abspath(__file__))
        textEdit_value = dict()
        try:
            textEdit_value['video'] = self.lineEdit.text()
        except Exception as e:
            self.printf(e)
        textEdit_value['onnx_file'] = os.path.join('C:\\Program Files\\trtmodel', 'pp_liteseg_CurrentLine_1030_1.onnx')
        textEdit_value['clsonnx_file'] = os.path.join('C:\\Program Files\\trtmodel', 'densenet3lay77_1022_5_242.onnx')

        # init_KILLThread()
        self.thread = Worker(textEdit_value)
        self.thread.start()

    def quit_app(self):
        try:
            self.thread_2 = StopRun()
        except:
            self.printf('None Need Stop')

    def printf(self, mypstr):
        self.log_buffer.append(mypstr)  # 将信息存入缓存
        # 可以设置一个最大缓存大小以避免占用过多内存
        # if len(self.log_buffer) > 1:  # 例如缓存最大为100条
        #     self.log_buffer.pop(0)

    def poplog_buffer(self):
        if len(self.log_buffer) > 10:  # 例如缓存最大为100条
            self.log_buffer.pop(0)

    def update_display(self):
        if self.log_buffer:
            # 将缓存中的内容加入到 textBrowser 中
            self.textBrowser.append("\n".join(self.log_buffer))
            self.log_buffer.clear()  # 清空缓存

            self.cursor = self.textBrowser.textCursor()
            self.textBrowser.moveCursor(self.cursor.End)  # 光标移到最后
    
    # def printf_special(self, mypstr):
    #     try:
    #         self.gpid.append(mypstr)  # 在指定的区域显示提示信息
    #         self.cursor = self.gpid.textCursor()
    #         self.gpid.moveCursor(self.cursor.End)  # 光标移到最后，这样就会自动显示出来
    #         QtWidgets.QApplication.processEvents()
    #     except:
    #         pass


def closeEvent(self, event: QtGui.QCloseEvent):
    reply = QtWidgets.QMessageBox.question(self, '确认退出', '确定要退出吗？',
                                    QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
    if reply == QtWidgets.QMessageBox.Yes:
        self.thread_2 = StopRun()
        event.accept()
    else:
        event.ignore()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.aboutToQuit.connect(app.deleteLater)
    widget = QMainWindow()
    widget.closeEvent = closeEvent.__get__(widget)

    ui = Ui_MainWindow(widget)
    # ui = Ui_MainWindow()
    # ui.setupUi(widget)
    widget.show()
    sys.exit(app.exec())
